diff --git a/net/can/bcm.c b/net/can/bcm.c
index 13690334e..fadb316f2 100644
--- a/net/can/bcm.c
+++ b/net/can/bcm.c
@@ -60,13 +60,6 @@
 #include <net/sock.h>
 #include <net/net_namespace.h>
 
-/*
- * To send multiple CAN frame content within TX_SETUP or to filter
- * CAN messages with multiplex index within RX_SETUP, the number of
- * different filters is limited to 256 due to the one byte index value.
- */
-#define MAX_NFRAMES 256
-
 /* use of last_frames[index].flags */
 #define RX_RECV    0x40 /* received data for this element */
 #define RX_THR     0x80 /* element not been sent due to throttle feature */
@@ -98,7 +91,7 @@ struct bcm_op {
 	struct list_head list;
 	int ifindex;
 	canid_t can_id;
-	u32 flags;
+	int flags;
 	unsigned long frames_abs, frames_filtered;
 	struct bcm_timeval ival1, ival2;
 	struct hrtimer timer, thrtimer;
@@ -106,9 +99,9 @@ struct bcm_op {
 	ktime_t rx_stamp, kt_ival1, kt_ival2, kt_lastmsg;
 	int rx_ifindex;
 	int cfsiz;
-	u32 count;
-	u32 nframes;
-	u32 currframe;
+	int count;
+	int nframes;
+	int currframe;
 	/* void pointers to arrays of struct can[fd]_frame */
 	void *frames;
 	void *last_frames;
@@ -193,9 +186,9 @@ static int bcm_proc_show(struct seq_file *m, void *v)
 			   bcm_proc_getifname(net, ifname, op->ifindex));
 
 		if (op->flags & CAN_FD_FRAME)
-			seq_printf(m, "(%u)", op->nframes);
+			seq_printf(m, "(%d)", op->nframes);
 		else
-			seq_printf(m, "[%u]", op->nframes);
+			seq_printf(m, "[%d]", op->nframes);
 
 		seq_printf(m, "%c ", (op->flags & RX_CHECK_DLC) ? 'd' : ' ');
 
@@ -222,9 +215,9 @@ static int bcm_proc_show(struct seq_file *m, void *v)
 			   bcm_proc_getifname(net, ifname, op->ifindex));
 
 		if (op->flags & CAN_FD_FRAME)
-			seq_printf(m, "(%u) ", op->nframes);
+			seq_printf(m, "(%d) ", op->nframes);
 		else
-			seq_printf(m, "[%u] ", op->nframes);
+			seq_printf(m, "[%d] ", op->nframes);
 
 		if (op->kt_ival1)
 			seq_printf(m, "t1=%lld ",
@@ -311,7 +304,7 @@ static void bcm_send_to_user(struct bcm_op *op, struct bcm_msg_head *head,
 	struct canfd_frame *firstframe;
 	struct sockaddr_can *addr;
 	struct sock *sk = op->sk;
-	unsigned int datalen = head->nframes * op->cfsiz;
+	int datalen = head->nframes * op->cfsiz;
 	int err;
 
 	skb = alloc_skb(sizeof(*head) + datalen, gfp_any());
@@ -494,7 +487,7 @@ static void bcm_rx_update_and_send(struct bcm_op *op,
  * bcm_rx_cmp_to_index - (bit)compares the currently received data to formerly
  *                       received data stored in op->last_frames[]
  */
-static void bcm_rx_cmp_to_index(struct bcm_op *op, unsigned int index,
+static void bcm_rx_cmp_to_index(struct bcm_op *op, int index,
 				const struct canfd_frame *rxdata)
 {
 	struct canfd_frame *cf = op->frames + op->cfsiz * index;
@@ -607,7 +600,7 @@ static int bcm_rx_thr_flush(struct bcm_op *op, int update)
 	int updated = 0;
 
 	if (op->nframes > 1) {
-		unsigned int i;
+		int i;
 
 		/* for MUX filter we start at index 1 */
 		for (i = 1; i < op->nframes; i++)
@@ -656,7 +649,7 @@ static void bcm_rx_handler(struct sk_buff *skb, void *data)
 {
 	struct bcm_op *op = (struct bcm_op *)data;
 	const struct canfd_frame *rxframe = (struct canfd_frame *)skb->data;
-	unsigned int i;
+	int i;
 
 	if (op->can_id != rxframe->can_id)
 		return;
@@ -875,15 +868,14 @@ static int bcm_tx_setup(struct bcm_msg_head *msg_head, struct msghdr *msg,
 	struct bcm_sock *bo = bcm_sk(sk);
 	struct bcm_op *op;
 	struct canfd_frame *cf;
-	unsigned int i;
-	int err;
+	int i, err;
 
 	/* we need a real device to send frames */
 	if (!ifindex)
 		return -ENODEV;
 
 	/* check nframes boundaries - we need at least one CAN frame */
-	if (msg_head->nframes < 1 || msg_head->nframes > MAX_NFRAMES)
+	if (msg_head->nframes < 1)
 		return -EINVAL;
 
 	/* check the given can_id */
@@ -1056,10 +1048,6 @@ static int bcm_rx_setup(struct bcm_msg_head *msg_head, struct msghdr *msg,
 		msg_head->nframes = 0;
 	}
 
-	/* the first element contains the mux-mask => MAX_NFRAMES + 1  */
-	if (msg_head->nframes > MAX_NFRAMES + 1)
-		return -EINVAL;
-
 	if ((msg_head->flags & RX_RTR_FRAME) &&
 	    ((msg_head->nframes != 1) ||
 	     (!(msg_head->can_id & CAN_RTR_FLAG))))
@@ -1080,8 +1068,7 @@ static int bcm_rx_setup(struct bcm_msg_head *msg_head, struct msghdr *msg,
 
 		if (msg_head->nframes) {
 			/* update CAN frames content */
-			err = memcpy_from_msg(op->frames, msg,
-					      msg_head->nframes * op->cfsiz);
+			err = copy_from_iter(op->frames, msg_head->nframes * op->cfsiz, &msg->msg_iter) == msg_head->nframes * op->cfsiz ? 0 : -EFAULT;
 			if (err < 0)
 				return err;
 
